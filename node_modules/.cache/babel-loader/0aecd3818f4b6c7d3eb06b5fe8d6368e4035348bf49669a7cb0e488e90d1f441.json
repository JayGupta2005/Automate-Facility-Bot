{"ast":null,"code":"// Mock API Service for Frontend-Only Demo\nclass MockApiService {\n  constructor() {\n    // Authentication endpoints\n    this.auth = {\n      // Register new user\n      register: async userData => {\n        await this.delay();\n\n        // Check if user already exists\n        const existingUser = this.mockData.users.find(u => u.email === userData.email);\n        if (existingUser) {\n          throw new Error('User with this email already exists');\n        }\n\n        // Create new user\n        const newUser = {\n          _id: Date.now().toString(),\n          ...userData,\n          role: 'user',\n          isActive: true\n        };\n        this.mockData.users.push(newUser);\n        this.mockData.currentUser = newUser;\n\n        // Generate mock token\n        const token = `mock-token-${Date.now()}`;\n        localStorage.setItem('token', token);\n        return {\n          status: 'success',\n          message: 'User registered successfully',\n          data: {\n            user: newUser,\n            token\n          }\n        };\n      },\n      // Login user\n      login: async credentials => {\n        await this.delay();\n        const user = this.mockData.users.find(u => u.email === credentials.email && u.isActive);\n        if (!user) {\n          throw new Error('Invalid email or password');\n        }\n        this.mockData.currentUser = user;\n\n        // Generate mock token\n        const token = `mock-token-${Date.now()}`;\n        localStorage.setItem('token', token);\n        return {\n          status: 'success',\n          message: 'Login successful',\n          data: {\n            user,\n            token\n          }\n        };\n      },\n      // Get current user profile\n      getProfile: async () => {\n        await this.delay();\n        const token = localStorage.getItem('token');\n        if (!token) {\n          throw new Error('Not authenticated');\n        }\n        return {\n          status: 'success',\n          data: {\n            user: this.mockData.currentUser\n          }\n        };\n      },\n      // Update user profile\n      updateProfile: async profileData => {\n        await this.delay();\n        if (!this.mockData.currentUser) {\n          throw new Error('Not authenticated');\n        }\n        Object.assign(this.mockData.currentUser, profileData);\n        return {\n          status: 'success',\n          message: 'Profile updated successfully',\n          data: {\n            user: this.mockData.currentUser\n          }\n        };\n      },\n      // Change password\n      changePassword: async passwordData => {\n        await this.delay();\n        return {\n          status: 'success',\n          message: 'Password changed successfully'\n        };\n      },\n      // Logout user\n      logout: async () => {\n        await this.delay();\n        this.mockData.currentUser = null;\n        localStorage.removeItem('token');\n        return {\n          status: 'success',\n          message: 'Logged out successfully'\n        };\n      },\n      // Create admin user (development only)\n      seedAdmin: async () => {\n        await this.delay();\n        const admin = this.mockData.users.find(u => u.role === 'admin');\n        if (admin) {\n          throw new Error('Admin user already exists');\n        }\n        return {\n          status: 'success',\n          message: 'Admin user created successfully',\n          data: {\n            user: admin,\n            token: `mock-token-${Date.now()}`\n          }\n        };\n      }\n    };\n    // Issues endpoints\n    this.issues = {\n      // Get all issues\n      getAll: async (params = {}) => {\n        var _this$mockData$curren;\n        await this.delay();\n        let filteredIssues = [...this.mockData.issues];\n\n        // Filter by user role\n        if (((_this$mockData$curren = this.mockData.currentUser) === null || _this$mockData$curren === void 0 ? void 0 : _this$mockData$curren.role) !== 'admin') {\n          filteredIssues = filteredIssues.filter(issue => {\n            var _this$mockData$curren2;\n            return issue.reportedBy._id === ((_this$mockData$curren2 = this.mockData.currentUser) === null || _this$mockData$curren2 === void 0 ? void 0 : _this$mockData$curren2._id);\n          });\n        }\n\n        // Filter by status\n        if (params.status && params.status !== 'all') {\n          filteredIssues = filteredIssues.filter(issue => issue.status === params.status);\n        }\n\n        // Filter by category\n        if (params.category && params.category !== 'all') {\n          filteredIssues = filteredIssues.filter(issue => issue.category === params.category);\n        }\n\n        // Filter by priority\n        if (params.priority && params.priority !== 'all') {\n          filteredIssues = filteredIssues.filter(issue => issue.priority === params.priority);\n        }\n\n        // Calculate stats\n        const stats = {\n          pending: filteredIssues.filter(i => i.status === 'pending').length,\n          'in-progress': filteredIssues.filter(i => i.status === 'in-progress').length,\n          resolved: filteredIssues.filter(i => i.status === 'resolved').length,\n          cancelled: filteredIssues.filter(i => i.status === 'cancelled').length\n        };\n        return {\n          status: 'success',\n          data: {\n            issues: filteredIssues,\n            stats\n          }\n        };\n      },\n      // Get single issue\n      getById: async id => {\n        await this.delay();\n        const issue = this.mockData.issues.find(i => i._id === id);\n        if (!issue) {\n          throw new Error('Issue not found');\n        }\n        return {\n          status: 'success',\n          data: {\n            issue\n          }\n        };\n      },\n      // Create new issue\n      create: async issueData => {\n        await this.delay();\n        if (!this.mockData.currentUser) {\n          throw new Error('Not authenticated');\n        }\n        const newIssue = {\n          _id: Date.now().toString(),\n          ...issueData,\n          reportedBy: this.mockData.currentUser,\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        };\n        this.mockData.issues.push(newIssue);\n        return {\n          status: 'success',\n          message: 'Issue created successfully',\n          data: {\n            issue: newIssue\n          }\n        };\n      },\n      // Update issue\n      update: async (id, issueData) => {\n        await this.delay();\n        const issue = this.mockData.issues.find(i => i._id === id);\n        if (!issue) {\n          throw new Error('Issue not found');\n        }\n        Object.assign(issue, issueData);\n        return {\n          status: 'success',\n          message: 'Issue updated successfully',\n          data: {\n            issue\n          }\n        };\n      },\n      // Delete issue\n      delete: async id => {\n        await this.delay();\n        const index = this.mockData.issues.findIndex(i => i._id === id);\n        if (index === -1) {\n          throw new Error('Issue not found');\n        }\n        this.mockData.issues.splice(index, 1);\n        return {\n          status: 'success',\n          message: 'Issue deleted successfully'\n        };\n      },\n      // Update issue status (Admin only)\n      updateStatus: async (id, statusData) => {\n        var _this$mockData$curren3;\n        await this.delay();\n        if (((_this$mockData$curren3 = this.mockData.currentUser) === null || _this$mockData$curren3 === void 0 ? void 0 : _this$mockData$curren3.role) !== 'admin') {\n          throw new Error('Admin access required');\n        }\n        const issue = this.mockData.issues.find(i => i._id === id);\n        if (!issue) {\n          throw new Error('Issue not found');\n        }\n        issue.status = statusData.status;\n        return {\n          status: 'success',\n          message: 'Issue status updated successfully',\n          data: {\n            issue\n          }\n        };\n      },\n      // Assign issue (Admin only)\n      assign: async (id, assignData) => {\n        var _this$mockData$curren4;\n        await this.delay();\n        if (((_this$mockData$curren4 = this.mockData.currentUser) === null || _this$mockData$curren4 === void 0 ? void 0 : _this$mockData$curren4.role) !== 'admin') {\n          throw new Error('Admin access required');\n        }\n        const issue = this.mockData.issues.find(i => i._id === id);\n        if (!issue) {\n          throw new Error('Issue not found');\n        }\n        issue.assignedTo = assignData.assignedTo;\n        return {\n          status: 'success',\n          message: 'Issue assigned successfully',\n          data: {\n            issue\n          }\n        };\n      },\n      // Add comment to issue\n      addComment: async (id, commentData) => {\n        await this.delay();\n        const issue = this.mockData.issues.find(i => i._id === id);\n        if (!issue) {\n          throw new Error('Issue not found');\n        }\n        if (!issue.comments) {\n          issue.comments = [];\n        }\n        issue.comments.push({\n          user: this.mockData.currentUser,\n          content: commentData.content,\n          createdAt: new Date().toISOString()\n        });\n        return {\n          status: 'success',\n          message: 'Comment added successfully',\n          data: {\n            issue\n          }\n        };\n      },\n      // Get issue statistics (Admin only)\n      getStats: async () => {\n        var _this$mockData$curren5;\n        await this.delay();\n        if (((_this$mockData$curren5 = this.mockData.currentUser) === null || _this$mockData$curren5 === void 0 ? void 0 : _this$mockData$curren5.role) !== 'admin') {\n          throw new Error('Admin access required');\n        }\n        const stats = {\n          total: this.mockData.issues.length,\n          pending: this.mockData.issues.filter(i => i.status === 'pending').length,\n          inProgress: this.mockData.issues.filter(i => i.status === 'in-progress').length,\n          resolved: this.mockData.issues.filter(i => i.status === 'resolved').length,\n          urgent: this.mockData.issues.filter(i => i.priority === 'urgent').length\n        };\n        return {\n          status: 'success',\n          data: {\n            overview: stats,\n            categories: [{\n              _id: 'electricity',\n              count: this.mockData.issues.filter(i => i.category === 'electricity').length\n            }, {\n              _id: 'wifi',\n              count: this.mockData.issues.filter(i => i.category === 'wifi').length\n            }, {\n              _id: 'water',\n              count: this.mockData.issues.filter(i => i.category === 'water').length\n            }, {\n              _id: 'cleanliness',\n              count: this.mockData.issues.filter(i => i.category === 'cleanliness').length\n            }, {\n              _id: 'other',\n              count: this.mockData.issues.filter(i => i.category === 'other').length\n            }],\n            recentIssues: this.mockData.issues.slice(0, 5)\n          }\n        };\n      }\n    };\n    // Users endpoints (Admin only)\n    this.users = {\n      // Get all users\n      getAll: async (params = {}) => {\n        var _this$mockData$curren6;\n        await this.delay();\n        if (((_this$mockData$curren6 = this.mockData.currentUser) === null || _this$mockData$curren6 === void 0 ? void 0 : _this$mockData$curren6.role) !== 'admin') {\n          throw new Error('Admin access required');\n        }\n        let filteredUsers = [...this.mockData.users];\n        if (params.role && params.role !== 'all') {\n          filteredUsers = filteredUsers.filter(u => u.role === params.role);\n        }\n        const stats = {\n          user: filteredUsers.filter(u => u.role === 'user').length,\n          admin: filteredUsers.filter(u => u.role === 'admin').length\n        };\n        return {\n          status: 'success',\n          data: {\n            users: filteredUsers,\n            stats\n          }\n        };\n      },\n      // Get user by ID\n      getById: async id => {\n        var _this$mockData$curren7;\n        await this.delay();\n        if (((_this$mockData$curren7 = this.mockData.currentUser) === null || _this$mockData$curren7 === void 0 ? void 0 : _this$mockData$curren7.role) !== 'admin') {\n          throw new Error('Admin access required');\n        }\n        const user = this.mockData.users.find(u => u._id === id);\n        if (!user) {\n          throw new Error('User not found');\n        }\n        return {\n          status: 'success',\n          data: {\n            user\n          }\n        };\n      },\n      // Update user\n      update: async (id, userData) => {\n        var _this$mockData$curren8;\n        await this.delay();\n        if (((_this$mockData$curren8 = this.mockData.currentUser) === null || _this$mockData$curren8 === void 0 ? void 0 : _this$mockData$curren8.role) !== 'admin') {\n          throw new Error('Admin access required');\n        }\n        const user = this.mockData.users.find(u => u._id === id);\n        if (!user) {\n          throw new Error('User not found');\n        }\n        Object.assign(user, userData);\n        return {\n          status: 'success',\n          message: 'User updated successfully',\n          data: {\n            user\n          }\n        };\n      },\n      // Delete user\n      delete: async id => {\n        var _this$mockData$curren9;\n        await this.delay();\n        if (((_this$mockData$curren9 = this.mockData.currentUser) === null || _this$mockData$curren9 === void 0 ? void 0 : _this$mockData$curren9.role) !== 'admin') {\n          throw new Error('Admin access required');\n        }\n        const index = this.mockData.users.findIndex(u => u._id === id);\n        if (index === -1) {\n          throw new Error('User not found');\n        }\n        this.mockData.users.splice(index, 1);\n        return {\n          status: 'success',\n          message: 'User deleted successfully'\n        };\n      },\n      // Toggle user status\n      toggleStatus: async id => {\n        var _this$mockData$curren0;\n        await this.delay();\n        if (((_this$mockData$curren0 = this.mockData.currentUser) === null || _this$mockData$curren0 === void 0 ? void 0 : _this$mockData$curren0.role) !== 'admin') {\n          throw new Error('Admin access required');\n        }\n        const user = this.mockData.users.find(u => u._id === id);\n        if (!user) {\n          throw new Error('User not found');\n        }\n        user.isActive = !user.isActive;\n        return {\n          status: 'success',\n          message: `User ${user.isActive ? 'activated' : 'deactivated'} successfully`,\n          data: {\n            user\n          }\n        };\n      },\n      // Get user statistics\n      getStats: async () => {\n        var _this$mockData$curren1;\n        await this.delay();\n        if (((_this$mockData$curren1 = this.mockData.currentUser) === null || _this$mockData$curren1 === void 0 ? void 0 : _this$mockData$curren1.role) !== 'admin') {\n          throw new Error('Admin access required');\n        }\n        const stats = {\n          total: this.mockData.users.length,\n          active: this.mockData.users.filter(u => u.isActive).length,\n          inactive: this.mockData.users.filter(u => !u.isActive).length\n        };\n        return {\n          status: 'success',\n          data: {\n            overview: stats,\n            roles: [{\n              _id: 'user',\n              count: this.mockData.users.filter(u => u.role === 'user').length\n            }, {\n              _id: 'admin',\n              count: this.mockData.users.filter(u => u.role === 'admin').length\n            }],\n            departments: [{\n              _id: 'Computer Science',\n              count: this.mockData.users.filter(u => u.department === 'Computer Science').length\n            }, {\n              _id: 'Administration',\n              count: this.mockData.users.filter(u => u.department === 'Administration').length\n            }],\n            recentUsers: this.mockData.users.slice(0, 5)\n          }\n        };\n      },\n      // Search maintenance staff\n      searchMaintenanceStaff: async search => {\n        var _this$mockData$curren10;\n        await this.delay();\n        if (((_this$mockData$curren10 = this.mockData.currentUser) === null || _this$mockData$curren10 === void 0 ? void 0 : _this$mockData$curren10.role) !== 'admin') {\n          throw new Error('Admin access required');\n        }\n        const users = this.mockData.users.filter(u => u.role === 'user' && u.isActive && (u.firstName.toLowerCase().includes(search.toLowerCase()) || u.lastName.toLowerCase().includes(search.toLowerCase()) || u.email.toLowerCase().includes(search.toLowerCase())));\n        return {\n          status: 'success',\n          data: {\n            users: users.slice(0, 10)\n          }\n        };\n      }\n    };\n    // Health check\n    this.health = async () => {\n      await this.delay();\n      return {\n        status: 'success',\n        message: 'Mock API is running',\n        timestamp: new Date().toISOString()\n      };\n    };\n    this.baseURL = 'mock://localhost';\n    this.mockData = {\n      users: [{\n        _id: '1',\n        firstName: 'Admin',\n        lastName: 'User',\n        email: 'admin@university.edu',\n        role: 'admin',\n        department: 'Administration',\n        studentId: null,\n        isActive: true\n      }, {\n        _id: '2',\n        firstName: 'John',\n        lastName: 'Student',\n        email: 'student@university.edu',\n        role: 'user',\n        department: 'Computer Science',\n        studentId: 'CS001',\n        isActive: true\n      }],\n      issues: [{\n        _id: '1',\n        title: 'Broken Light Bulb',\n        category: 'electricity',\n        location: 'Room 101',\n        description: 'The light bulb in the corner is not working',\n        status: 'pending',\n        priority: 'medium',\n        reportedBy: {\n          _id: '2',\n          firstName: 'John',\n          lastName: 'Student',\n          email: 'student@university.edu'\n        },\n        createdAt: new Date('2024-01-15').toISOString()\n      }, {\n        _id: '2',\n        title: 'WiFi Connection Issues',\n        category: 'wifi',\n        location: 'Library',\n        description: 'WiFi is very slow in the library area',\n        status: 'in-progress',\n        priority: 'high',\n        reportedBy: {\n          _id: '2',\n          firstName: 'John',\n          lastName: 'Student',\n          email: 'student@university.edu'\n        },\n        createdAt: new Date('2024-01-14').toISOString()\n      }],\n      currentUser: null\n    };\n  }\n\n  // Helper method to simulate API delay\n  async delay(ms = 500) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // Helper method to get auth headers\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    return {\n      'Content-Type': 'application/json',\n      ...(token && {\n        Authorization: `Bearer ${token}`\n      })\n    };\n  }\n}\n\n// Create and export a singleton instance\nconst apiService = new MockApiService();\nexport default apiService;","map":{"version":3,"names":["MockApiService","constructor","auth","register","userData","delay","existingUser","mockData","users","find","u","email","Error","newUser","_id","Date","now","toString","role","isActive","push","currentUser","token","localStorage","setItem","status","message","data","user","login","credentials","getProfile","getItem","updateProfile","profileData","Object","assign","changePassword","passwordData","logout","removeItem","seedAdmin","admin","issues","getAll","params","_this$mockData$curren","filteredIssues","filter","issue","_this$mockData$curren2","reportedBy","category","priority","stats","pending","i","length","resolved","cancelled","getById","id","create","issueData","newIssue","createdAt","toISOString","update","delete","index","findIndex","splice","updateStatus","statusData","_this$mockData$curren3","assignData","_this$mockData$curren4","assignedTo","addComment","commentData","comments","content","getStats","_this$mockData$curren5","total","inProgress","urgent","overview","categories","count","recentIssues","slice","_this$mockData$curren6","filteredUsers","_this$mockData$curren7","_this$mockData$curren8","_this$mockData$curren9","toggleStatus","_this$mockData$curren0","_this$mockData$curren1","active","inactive","roles","departments","department","recentUsers","searchMaintenanceStaff","search","_this$mockData$curren10","firstName","toLowerCase","includes","lastName","health","timestamp","baseURL","studentId","title","location","description","ms","Promise","resolve","setTimeout","getAuthHeaders","Authorization","apiService"],"sources":["C:/Users/Abinash Giri/Desktop/AI-botforjay/src/services/api.js"],"sourcesContent":["// Mock API Service for Frontend-Only Demo\r\nclass MockApiService {\r\n  constructor() {\r\n    this.baseURL = 'mock://localhost';\r\n    this.mockData = {\r\n      users: [\r\n        {\r\n          _id: '1',\r\n          firstName: 'Admin',\r\n          lastName: 'User',\r\n          email: 'admin@university.edu',\r\n          role: 'admin',\r\n          department: 'Administration',\r\n          studentId: null,\r\n          isActive: true\r\n        },\r\n        {\r\n          _id: '2',\r\n          firstName: 'John',\r\n          lastName: 'Student',\r\n          email: 'student@university.edu',\r\n          role: 'user',\r\n          department: 'Computer Science',\r\n          studentId: 'CS001',\r\n          isActive: true\r\n        }\r\n      ],\r\n      issues: [\r\n        {\r\n          _id: '1',\r\n          title: 'Broken Light Bulb',\r\n          category: 'electricity',\r\n          location: 'Room 101',\r\n          description: 'The light bulb in the corner is not working',\r\n          status: 'pending',\r\n          priority: 'medium',\r\n          reportedBy: {\r\n            _id: '2',\r\n            firstName: 'John',\r\n            lastName: 'Student',\r\n            email: 'student@university.edu'\r\n          },\r\n          createdAt: new Date('2024-01-15').toISOString()\r\n        },\r\n        {\r\n          _id: '2',\r\n          title: 'WiFi Connection Issues',\r\n          category: 'wifi',\r\n          location: 'Library',\r\n          description: 'WiFi is very slow in the library area',\r\n          status: 'in-progress',\r\n          priority: 'high',\r\n          reportedBy: {\r\n            _id: '2',\r\n            firstName: 'John',\r\n            lastName: 'Student',\r\n            email: 'student@university.edu'\r\n          },\r\n          createdAt: new Date('2024-01-14').toISOString()\r\n        }\r\n      ],\r\n      currentUser: null\r\n    };\r\n  }\r\n\r\n  // Helper method to simulate API delay\r\n  async delay(ms = 500) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  // Helper method to get auth headers\r\n  getAuthHeaders() {\r\n    const token = localStorage.getItem('token');\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { Authorization: `Bearer ${token}` })\r\n    };\r\n  }\r\n\r\n  // Authentication endpoints\r\n  auth = {\r\n    // Register new user\r\n    register: async (userData) => {\r\n      await this.delay();\r\n      \r\n      // Check if user already exists\r\n      const existingUser = this.mockData.users.find(u => u.email === userData.email);\r\n      if (existingUser) {\r\n        throw new Error('User with this email already exists');\r\n      }\r\n\r\n      // Create new user\r\n      const newUser = {\r\n        _id: Date.now().toString(),\r\n        ...userData,\r\n        role: 'user',\r\n        isActive: true\r\n      };\r\n      \r\n      this.mockData.users.push(newUser);\r\n      this.mockData.currentUser = newUser;\r\n      \r\n      // Generate mock token\r\n      const token = `mock-token-${Date.now()}`;\r\n      localStorage.setItem('token', token);\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: 'User registered successfully',\r\n        data: {\r\n          user: newUser,\r\n          token\r\n        }\r\n      };\r\n    },\r\n\r\n    // Login user\r\n    login: async (credentials) => {\r\n      await this.delay();\r\n      \r\n      const user = this.mockData.users.find(u => \r\n        u.email === credentials.email && u.isActive\r\n      );\r\n      \r\n      if (!user) {\r\n        throw new Error('Invalid email or password');\r\n      }\r\n      \r\n      this.mockData.currentUser = user;\r\n      \r\n      // Generate mock token\r\n      const token = `mock-token-${Date.now()}`;\r\n      localStorage.setItem('token', token);\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: 'Login successful',\r\n        data: {\r\n          user,\r\n          token\r\n        }\r\n      };\r\n    },\r\n\r\n    // Get current user profile\r\n    getProfile: async () => {\r\n      await this.delay();\r\n      \r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('Not authenticated');\r\n      }\r\n      \r\n      return {\r\n        status: 'success',\r\n        data: {\r\n          user: this.mockData.currentUser\r\n        }\r\n      };\r\n    },\r\n\r\n    // Update user profile\r\n    updateProfile: async (profileData) => {\r\n      await this.delay();\r\n      \r\n      if (!this.mockData.currentUser) {\r\n        throw new Error('Not authenticated');\r\n      }\r\n      \r\n      Object.assign(this.mockData.currentUser, profileData);\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: 'Profile updated successfully',\r\n        data: {\r\n          user: this.mockData.currentUser\r\n        }\r\n      };\r\n    },\r\n\r\n    // Change password\r\n    changePassword: async (passwordData) => {\r\n      await this.delay();\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: 'Password changed successfully'\r\n      };\r\n    },\r\n\r\n    // Logout user\r\n    logout: async () => {\r\n      await this.delay();\r\n      \r\n      this.mockData.currentUser = null;\r\n      localStorage.removeItem('token');\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: 'Logged out successfully'\r\n      };\r\n    },\r\n\r\n    // Create admin user (development only)\r\n    seedAdmin: async () => {\r\n      await this.delay();\r\n      \r\n      const admin = this.mockData.users.find(u => u.role === 'admin');\r\n      if (admin) {\r\n        throw new Error('Admin user already exists');\r\n      }\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: 'Admin user created successfully',\r\n        data: {\r\n          user: admin,\r\n          token: `mock-token-${Date.now()}`\r\n        }\r\n      };\r\n    }\r\n  };\r\n\r\n  // Issues endpoints\r\n  issues = {\r\n    // Get all issues\r\n    getAll: async (params = {}) => {\r\n      await this.delay();\r\n      \r\n      let filteredIssues = [...this.mockData.issues];\r\n      \r\n      // Filter by user role\r\n      if (this.mockData.currentUser?.role !== 'admin') {\r\n        filteredIssues = filteredIssues.filter(issue => \r\n          issue.reportedBy._id === this.mockData.currentUser?._id\r\n        );\r\n      }\r\n      \r\n      // Filter by status\r\n      if (params.status && params.status !== 'all') {\r\n        filteredIssues = filteredIssues.filter(issue => issue.status === params.status);\r\n      }\r\n      \r\n      // Filter by category\r\n      if (params.category && params.category !== 'all') {\r\n        filteredIssues = filteredIssues.filter(issue => issue.category === params.category);\r\n      }\r\n      \r\n      // Filter by priority\r\n      if (params.priority && params.priority !== 'all') {\r\n        filteredIssues = filteredIssues.filter(issue => issue.priority === params.priority);\r\n      }\r\n      \r\n      // Calculate stats\r\n      const stats = {\r\n        pending: filteredIssues.filter(i => i.status === 'pending').length,\r\n        'in-progress': filteredIssues.filter(i => i.status === 'in-progress').length,\r\n        resolved: filteredIssues.filter(i => i.status === 'resolved').length,\r\n        cancelled: filteredIssues.filter(i => i.status === 'cancelled').length\r\n      };\r\n      \r\n      return {\r\n        status: 'success',\r\n        data: {\r\n          issues: filteredIssues,\r\n          stats\r\n        }\r\n      };\r\n    },\r\n\r\n    // Get single issue\r\n    getById: async (id) => {\r\n      await this.delay();\r\n      \r\n      const issue = this.mockData.issues.find(i => i._id === id);\r\n      if (!issue) {\r\n        throw new Error('Issue not found');\r\n      }\r\n      \r\n      return {\r\n        status: 'success',\r\n        data: { issue }\r\n      };\r\n    },\r\n\r\n    // Create new issue\r\n    create: async (issueData) => {\r\n      await this.delay();\r\n      \r\n      if (!this.mockData.currentUser) {\r\n        throw new Error('Not authenticated');\r\n      }\r\n      \r\n      const newIssue = {\r\n        _id: Date.now().toString(),\r\n        ...issueData,\r\n        reportedBy: this.mockData.currentUser,\r\n        status: 'pending',\r\n        createdAt: new Date().toISOString()\r\n      };\r\n      \r\n      this.mockData.issues.push(newIssue);\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: 'Issue created successfully',\r\n        data: { issue: newIssue }\r\n      };\r\n    },\r\n\r\n    // Update issue\r\n    update: async (id, issueData) => {\r\n      await this.delay();\r\n      \r\n      const issue = this.mockData.issues.find(i => i._id === id);\r\n      if (!issue) {\r\n        throw new Error('Issue not found');\r\n      }\r\n      \r\n      Object.assign(issue, issueData);\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: 'Issue updated successfully',\r\n        data: { issue }\r\n      };\r\n    },\r\n\r\n    // Delete issue\r\n    delete: async (id) => {\r\n      await this.delay();\r\n      \r\n      const index = this.mockData.issues.findIndex(i => i._id === id);\r\n      if (index === -1) {\r\n        throw new Error('Issue not found');\r\n      }\r\n      \r\n      this.mockData.issues.splice(index, 1);\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: 'Issue deleted successfully'\r\n      };\r\n    },\r\n\r\n    // Update issue status (Admin only)\r\n    updateStatus: async (id, statusData) => {\r\n      await this.delay();\r\n      \r\n      if (this.mockData.currentUser?.role !== 'admin') {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      const issue = this.mockData.issues.find(i => i._id === id);\r\n      if (!issue) {\r\n        throw new Error('Issue not found');\r\n      }\r\n      \r\n      issue.status = statusData.status;\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: 'Issue status updated successfully',\r\n        data: { issue }\r\n      };\r\n    },\r\n\r\n    // Assign issue (Admin only)\r\n    assign: async (id, assignData) => {\r\n      await this.delay();\r\n      \r\n      if (this.mockData.currentUser?.role !== 'admin') {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      const issue = this.mockData.issues.find(i => i._id === id);\r\n      if (!issue) {\r\n        throw new Error('Issue not found');\r\n      }\r\n      \r\n      issue.assignedTo = assignData.assignedTo;\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: 'Issue assigned successfully',\r\n        data: { issue }\r\n      };\r\n    },\r\n\r\n    // Add comment to issue\r\n    addComment: async (id, commentData) => {\r\n      await this.delay();\r\n      \r\n      const issue = this.mockData.issues.find(i => i._id === id);\r\n      if (!issue) {\r\n        throw new Error('Issue not found');\r\n      }\r\n      \r\n      if (!issue.comments) {\r\n        issue.comments = [];\r\n      }\r\n      \r\n      issue.comments.push({\r\n        user: this.mockData.currentUser,\r\n        content: commentData.content,\r\n        createdAt: new Date().toISOString()\r\n      });\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: 'Comment added successfully',\r\n        data: { issue }\r\n      };\r\n    },\r\n\r\n    // Get issue statistics (Admin only)\r\n    getStats: async () => {\r\n      await this.delay();\r\n      \r\n      if (this.mockData.currentUser?.role !== 'admin') {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      const stats = {\r\n        total: this.mockData.issues.length,\r\n        pending: this.mockData.issues.filter(i => i.status === 'pending').length,\r\n        inProgress: this.mockData.issues.filter(i => i.status === 'in-progress').length,\r\n        resolved: this.mockData.issues.filter(i => i.status === 'resolved').length,\r\n        urgent: this.mockData.issues.filter(i => i.priority === 'urgent').length\r\n      };\r\n      \r\n      return {\r\n        status: 'success',\r\n        data: {\r\n          overview: stats,\r\n          categories: [\r\n            { _id: 'electricity', count: this.mockData.issues.filter(i => i.category === 'electricity').length },\r\n            { _id: 'wifi', count: this.mockData.issues.filter(i => i.category === 'wifi').length },\r\n            { _id: 'water', count: this.mockData.issues.filter(i => i.category === 'water').length },\r\n            { _id: 'cleanliness', count: this.mockData.issues.filter(i => i.category === 'cleanliness').length },\r\n            { _id: 'other', count: this.mockData.issues.filter(i => i.category === 'other').length }\r\n          ],\r\n          recentIssues: this.mockData.issues.slice(0, 5)\r\n        }\r\n      };\r\n    }\r\n  };\r\n\r\n  // Users endpoints (Admin only)\r\n  users = {\r\n    // Get all users\r\n    getAll: async (params = {}) => {\r\n      await this.delay();\r\n      \r\n      if (this.mockData.currentUser?.role !== 'admin') {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      let filteredUsers = [...this.mockData.users];\r\n      \r\n      if (params.role && params.role !== 'all') {\r\n        filteredUsers = filteredUsers.filter(u => u.role === params.role);\r\n      }\r\n      \r\n      const stats = {\r\n        user: filteredUsers.filter(u => u.role === 'user').length,\r\n        admin: filteredUsers.filter(u => u.role === 'admin').length\r\n      };\r\n      \r\n      return {\r\n        status: 'success',\r\n        data: {\r\n          users: filteredUsers,\r\n          stats\r\n        }\r\n      };\r\n    },\r\n\r\n    // Get user by ID\r\n    getById: async (id) => {\r\n      await this.delay();\r\n      \r\n      if (this.mockData.currentUser?.role !== 'admin') {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      const user = this.mockData.users.find(u => u._id === id);\r\n      if (!user) {\r\n        throw new Error('User not found');\r\n      }\r\n      \r\n      return {\r\n        status: 'success',\r\n        data: { user }\r\n      };\r\n    },\r\n\r\n    // Update user\r\n    update: async (id, userData) => {\r\n      await this.delay();\r\n      \r\n      if (this.mockData.currentUser?.role !== 'admin') {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      const user = this.mockData.users.find(u => u._id === id);\r\n      if (!user) {\r\n        throw new Error('User not found');\r\n      }\r\n      \r\n      Object.assign(user, userData);\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: 'User updated successfully',\r\n        data: { user }\r\n      };\r\n    },\r\n\r\n    // Delete user\r\n    delete: async (id) => {\r\n      await this.delay();\r\n      \r\n      if (this.mockData.currentUser?.role !== 'admin') {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      const index = this.mockData.users.findIndex(u => u._id === id);\r\n      if (index === -1) {\r\n        throw new Error('User not found');\r\n      }\r\n      \r\n      this.mockData.users.splice(index, 1);\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: 'User deleted successfully'\r\n      };\r\n    },\r\n\r\n    // Toggle user status\r\n    toggleStatus: async (id) => {\r\n      await this.delay();\r\n      \r\n      if (this.mockData.currentUser?.role !== 'admin') {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      const user = this.mockData.users.find(u => u._id === id);\r\n      if (!user) {\r\n        throw new Error('User not found');\r\n      }\r\n      \r\n      user.isActive = !user.isActive;\r\n      \r\n      return {\r\n        status: 'success',\r\n        message: `User ${user.isActive ? 'activated' : 'deactivated'} successfully`,\r\n        data: { user }\r\n      };\r\n    },\r\n\r\n    // Get user statistics\r\n    getStats: async () => {\r\n      await this.delay();\r\n      \r\n      if (this.mockData.currentUser?.role !== 'admin') {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      const stats = {\r\n        total: this.mockData.users.length,\r\n        active: this.mockData.users.filter(u => u.isActive).length,\r\n        inactive: this.mockData.users.filter(u => !u.isActive).length\r\n      };\r\n      \r\n      return {\r\n        status: 'success',\r\n        data: {\r\n          overview: stats,\r\n          roles: [\r\n            { _id: 'user', count: this.mockData.users.filter(u => u.role === 'user').length },\r\n            { _id: 'admin', count: this.mockData.users.filter(u => u.role === 'admin').length }\r\n          ],\r\n          departments: [\r\n            { _id: 'Computer Science', count: this.mockData.users.filter(u => u.department === 'Computer Science').length },\r\n            { _id: 'Administration', count: this.mockData.users.filter(u => u.department === 'Administration').length }\r\n          ],\r\n          recentUsers: this.mockData.users.slice(0, 5)\r\n        }\r\n      };\r\n    },\r\n\r\n    // Search maintenance staff\r\n    searchMaintenanceStaff: async (search) => {\r\n      await this.delay();\r\n      \r\n      if (this.mockData.currentUser?.role !== 'admin') {\r\n        throw new Error('Admin access required');\r\n      }\r\n      \r\n      const users = this.mockData.users.filter(u => \r\n        u.role === 'user' && \r\n        u.isActive && \r\n        (u.firstName.toLowerCase().includes(search.toLowerCase()) ||\r\n         u.lastName.toLowerCase().includes(search.toLowerCase()) ||\r\n         u.email.toLowerCase().includes(search.toLowerCase()))\r\n      );\r\n      \r\n      return {\r\n        status: 'success',\r\n        data: { users: users.slice(0, 10) }\r\n      };\r\n    }\r\n  };\r\n\r\n  // Health check\r\n  health = async () => {\r\n    await this.delay();\r\n    \r\n    return {\r\n      status: 'success',\r\n      message: 'Mock API is running',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nconst apiService = new MockApiService();\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}