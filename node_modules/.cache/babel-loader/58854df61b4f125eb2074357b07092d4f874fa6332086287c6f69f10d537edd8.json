{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arash infotech\\\\OneDrive\\\\Desktop\\\\AI-botforjay1\\\\src\\\\context\\\\IssueContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { useAuth } from './AuthContext';\nimport apiService from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IssueContext = /*#__PURE__*/createContext();\nexport const useIssues = () => {\n  _s();\n  const context = useContext(IssueContext);\n  if (!context) {\n    throw new Error('useIssues must be used within an IssueProvider');\n  }\n  return context;\n};\n_s(useIssues, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const IssueProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const [issues, setIssues] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [stats, setStats] = useState({\n    pending: 0,\n    'in-progress': 0,\n    resolved: 0,\n    cancelled: 0\n  });\n\n  // ✅ Memoized loadIssues\n  const loadIssues = useCallback(async (params = {}) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiService.issues.getAll(params);\n      setIssues(response.data.issues);\n      setStats(response.data.stats);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to load issues:', error);\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, []); // no deps, stable reference\n\n  // Load issues when user changes or component mounts\n  useEffect(() => {\n    if (isAuthenticated()) {\n      loadIssues();\n    } else {\n      setIssues([]);\n      setStats({\n        pending: 0,\n        'in-progress': 0,\n        resolved: 0,\n        cancelled: 0\n      });\n    }\n  }, [user, isAuthenticated, loadIssues]); // ✅ now safe\n\n  // ... (rest of your functions remain same)\n\n  const value = {\n    issues,\n    stats,\n    loading,\n    error,\n    loadIssues\n    // keep other methods as they are...\n  };\n  return /*#__PURE__*/_jsxDEV(IssueContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s2(IssueProvider, \"pbX7JzOnPNAbgnB4tTMPjO17bFk=\", false, function () {\n  return [useAuth];\n});\n_c = IssueProvider;\nvar _c;\n$RefreshReg$(_c, \"IssueProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useAuth","apiService","jsxDEV","_jsxDEV","IssueContext","useIssues","_s","context","Error","IssueProvider","children","_s2","user","isAuthenticated","issues","setIssues","loading","setLoading","error","setError","stats","setStats","pending","resolved","cancelled","loadIssues","params","response","getAll","data","console","message","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/arash infotech/OneDrive/Desktop/AI-botforjay1/src/context/IssueContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from './AuthContext';\r\nimport apiService from '../services/api';\r\n\r\nconst IssueContext = createContext();\r\n\r\nexport const useIssues = () => {\r\n  const context = useContext(IssueContext);\r\n  if (!context) {\r\n    throw new Error('useIssues must be used within an IssueProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const IssueProvider = ({ children }) => {\r\n  const { user, isAuthenticated } = useAuth();\r\n  const [issues, setIssues] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [stats, setStats] = useState({\r\n    pending: 0,\r\n    'in-progress': 0,\r\n    resolved: 0,\r\n    cancelled: 0\r\n  });\r\n\r\n  // ✅ Memoized loadIssues\r\n  const loadIssues = useCallback(async (params = {}) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const response = await apiService.issues.getAll(params);\r\n\r\n      setIssues(response.data.issues);\r\n      setStats(response.data.stats);\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to load issues:', error);\r\n      setError(error.message);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []); // no deps, stable reference\r\n\r\n  // Load issues when user changes or component mounts\r\n  useEffect(() => {\r\n    if (isAuthenticated()) {\r\n      loadIssues();\r\n    } else {\r\n      setIssues([]);\r\n      setStats({\r\n        pending: 0,\r\n        'in-progress': 0,\r\n        resolved: 0,\r\n        cancelled: 0\r\n      });\r\n    }\r\n  }, [user, isAuthenticated, loadIssues]); // ✅ now safe\r\n\r\n  // ... (rest of your functions remain same)\r\n  \r\n  const value = {\r\n    issues,\r\n    stats,\r\n    loading,\r\n    error,\r\n    loadIssues,\r\n    // keep other methods as they are...\r\n  };\r\n\r\n  return (\r\n    <IssueContext.Provider value={value}>\r\n      {children}\r\n    </IssueContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}