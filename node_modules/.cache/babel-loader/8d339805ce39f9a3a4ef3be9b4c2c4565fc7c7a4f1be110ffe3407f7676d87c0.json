{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abinash Giri\\\\Desktop\\\\AI-botforjay\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiService from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Check for stored token and validate it\n    const token = localStorage.getItem('token');\n    if (token) {\n      validateToken();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const validateToken = async () => {\n    try {\n      const response = await apiService.auth.getProfile();\n      setUser(response.data.user);\n      setError(null);\n    } catch (error) {\n      console.error('Token validation failed:', error);\n      // Token is invalid, remove it\n      localStorage.removeItem('token');\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      const response = await apiService.auth.login({\n        email,\n        password\n      });\n      const {\n        user,\n        token\n      } = response.data;\n\n      // Store token\n      localStorage.setItem('token', token);\n\n      // Set user\n      setUser(user);\n      return user;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      setError(null);\n      const response = await apiService.auth.register(userData);\n      const {\n        user,\n        token\n      } = response.data;\n\n      // Store token\n      localStorage.setItem('token', token);\n\n      // Set user\n      setUser(user);\n      return user;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      // Call logout API\n      await apiService.auth.logout();\n    } catch (error) {\n      console.error('Logout API call failed:', error);\n    } finally {\n      // Remove token and user regardless of API call success\n      localStorage.removeItem('token');\n      setUser(null);\n      setError(null);\n    }\n  };\n  const updateProfile = async profileData => {\n    try {\n      setError(null);\n      const response = await apiService.auth.updateProfile(profileData);\n      setUser(response.data.user);\n      return response.data.user;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    }\n  };\n  const changePassword = async passwordData => {\n    try {\n      setError(null);\n      await apiService.auth.changePassword(passwordData);\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    }\n  };\n  const isAdmin = () => (user === null || user === void 0 ? void 0 : user.role) === 'admin';\n  const isUser = () => (user === null || user === void 0 ? void 0 : user.role) === 'user';\n  const isAuthenticated = () => !!user;\n  const clearError = () => {\n    setError(null);\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword,\n    isAdmin,\n    isUser,\n    isAuthenticated,\n    loading,\n    error,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","token","localStorage","getItem","validateToken","response","auth","getProfile","data","console","removeItem","login","email","password","setItem","message","register","userData","logout","updateProfile","profileData","changePassword","passwordData","isAdmin","role","isUser","isAuthenticated","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Abinash Giri/Desktop/AI-botforjay/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport apiService from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Check for stored token and validate it\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      validateToken();\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const validateToken = async () => {\r\n    try {\r\n      const response = await apiService.auth.getProfile();\r\n      setUser(response.data.user);\r\n      setError(null);\r\n    } catch (error) {\r\n      console.error('Token validation failed:', error);\r\n      // Token is invalid, remove it\r\n      localStorage.removeItem('token');\r\n      setUser(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      setError(null);\r\n      const response = await apiService.auth.login({ email, password });\r\n      \r\n      const { user, token } = response.data;\r\n      \r\n      // Store token\r\n      localStorage.setItem('token', token);\r\n      \r\n      // Set user\r\n      setUser(user);\r\n      \r\n      return user;\r\n    } catch (error) {\r\n      setError(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      setError(null);\r\n      const response = await apiService.auth.register(userData);\r\n      \r\n      const { user, token } = response.data;\r\n      \r\n      // Store token\r\n      localStorage.setItem('token', token);\r\n      \r\n      // Set user\r\n      setUser(user);\r\n      \r\n      return user;\r\n    } catch (error) {\r\n      setError(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      // Call logout API\r\n      await apiService.auth.logout();\r\n    } catch (error) {\r\n      console.error('Logout API call failed:', error);\r\n    } finally {\r\n      // Remove token and user regardless of API call success\r\n      localStorage.removeItem('token');\r\n      setUser(null);\r\n      setError(null);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (profileData) => {\r\n    try {\r\n      setError(null);\r\n      const response = await apiService.auth.updateProfile(profileData);\r\n      setUser(response.data.user);\r\n      return response.data.user;\r\n    } catch (error) {\r\n      setError(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const changePassword = async (passwordData) => {\r\n    try {\r\n      setError(null);\r\n      await apiService.auth.changePassword(passwordData);\r\n    } catch (error) {\r\n      setError(error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const isAdmin = () => user?.role === 'admin';\r\n  const isUser = () => user?.role === 'user';\r\n  const isAuthenticated = () => !!user;\r\n\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateProfile,\r\n    changePassword,\r\n    isAdmin,\r\n    isUser,\r\n    isAuthenticated,\r\n    loading,\r\n    error,\r\n    clearError\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}